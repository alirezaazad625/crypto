package ir.sharif.messenger.common.random;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.nio.charset.StandardCharsets;

import static ir.sharif.messenger.common.Utils.assertUniform;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

class RC4PRGUnitTest {
    private RC4PRG instance;
    private final String defaultSeed = "chert o pert seed";

    @BeforeEach
    void setup() {
        this.instance = new RC4PRG(this.defaultSeed);
    }

    @Test
    void generateByte_whenCalledOnCloneInstances_thenResultsAreDeterministic() {
        RC4PRG cloneInstance = new RC4PRG(this.defaultSeed);
        for (int idx = 0; idx < 10_000; idx++) {
            byte gotFromDefault = this.instance.generateByte();
            byte gotFromClone = cloneInstance.generateByte();
            assertEquals(gotFromDefault, gotFromClone, "generated byte from clone and default instance was not the same");
        }
    }

    @Test
    void generateBytes_whenPassedLargeEnoughSize_thenGeneratesAlmostUniformOutput() {
        byte[] got = this.instance.generateBytes(RC4PRG.SEED_SIZE * 100_000);
        assertUniform(got, 5.0);
    }

    @Test
    void generateBytes_whenPassedNegativeSize_thenThrowsException() {
        assertThrows(IllegalArgumentException.class, () -> this.instance.generateBytes(-1));
    }

    @Test
    void generateString_whenPassedNegativeSize_thenThrowsException() {
        assertThrows(IllegalArgumentException.class, () -> this.instance.generateString(-1));
    }

    @Test
    void generateString_whenPassedSpecificSize_thenResultsAreDeterministicAndAsExpected() {
        int expectedSize = 10;
        RC4PRG cloneInstance = new RC4PRG(this.defaultSeed);
        for (int idx = 0; idx < 10_000; idx++) {
            byte[] gotFromDefault = this.instance.generateBytes(expectedSize);
            String gotFromClone = cloneInstance.generateString(expectedSize);
            assertEquals(new String(gotFromDefault, StandardCharsets.UTF_8), gotFromClone, "string and bytes data does not match");
        }
    }

}
